// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Type Alias Reflection should compile array of objects type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: ArrayOfObjectsType

> **ArrayOfObjectsType**: \`object\`[]

## Type declaration

### age

> **age**: \`number\`

### name

> **name**: \`string\`

Comments for name

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile array of objects type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: ArrayOfObjectsType

\`\`\`ts
type ArrayOfObjectsType = object[];
\`\`\`

## Type declaration

| Name | Type | Description |
| :------ | :------ | :------ |
| \`age\` | \`number\` | - |
| \`name\` | \`string\` | Comments for name |

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile array type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: ArrayType

> **ArrayType**: \`string\`[]

Comments for ArrayType

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile array type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: ArrayType

\`\`\`ts
type ArrayType = string[];
\`\`\`

Comments for ArrayType

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile conditional type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: ConditionalType\\<T\\>

> **ConditionalType**\\<\`T\`\\>: \`T\` *extends* \`string\` ? \`"string"\` : \`T\` *extends* \`number\` ? \`"number"\` : \`T\` *extends* \`boolean\` ? \`"boolean"\` : \`T\` *extends* \`undefined\` ? \`"undefined"\` : \`"object"\`

Comments for ConditionalType

## Type Parameters

â€¢ **T**

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile conditional type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: ConditionalType\\<T\\>

\`\`\`ts
type ConditionalType<T> = T extends string ? "string" : T extends number ? "number" : T extends boolean ? "boolean" : T extends undefined ? "undefined" : "object";
\`\`\`

Comments for ConditionalType

## Type Parameters

| Type Parameter |
| :------ |
| \`T\` |

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile external link symbol type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: TypeWithExternalSymbolLinkMapping

> **TypeWithExternalSymbolLinkMapping**: [\`Application\`](https://typedoc.org/api/classes/Application.html)

Comments for TypeWithExternalSymbolLinkMapping

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile external link symbol type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: TypeWithExternalSymbolLinkMapping

\`\`\`ts
type TypeWithExternalSymbolLinkMapping = Application;
\`\`\`

Comments for TypeWithExternalSymbolLinkMapping

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile external literal type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: LiteralType

> **LiteralType**: \`object\`

Comments for LiteralType

## Type declaration

### someFunctionWithArrow()

> **someFunctionWithArrow**: () => \`string\`

Comments for someFunctionWithArrow

#### Returns

\`string\`

### x?

> \`optional\` **x**: \`string\`

comment for x

### y

> **y**: \`object\`

comment for y

#### y.x

> **x**: \`string\`

comment for y.x

#### y.y?

> \`optional\` **y**: \`boolean\` \\| \`string\`

comment for y.y

#### y.z()

> **z**: (\`x\`) => \`string\`

comment for y.z

##### Parameters

###### x

\`string\`

##### Returns

\`string\`

### z()

> **z**: (\`x\`) => \`string\`

#### Parameters

##### x

\`string\`

#### Returns

\`string\`

### accessorA

#### Get Signature

> **get** **accessorA**(): [\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\>

Comments for accessorA getter

##### Returns

[\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\>

#### Set Signature

> **set** **accessorA**(\`x\`): \`void\`

Comments for accessorA setter

##### Parameters

###### x

[\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\>

##### Returns

\`void\`

### accessorB

#### Get Signature

> **get** **accessorB**(): \`string\`

##### Returns

\`string\`

#### Set Signature

> **set** **accessorB**(\`x\`): \`void\`

##### Parameters

###### x

\`string\`

##### Returns

\`void\`

### someFunction()

Comments for someFunction

#### Parameters

##### param

\`string\`

#### Returns

[\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`any\`\\>

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile external literal type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: LiteralType

\`\`\`ts
type LiteralType = object;
\`\`\`

Comments for LiteralType

## Type declaration

| Name | Type | Description |
| :------ | :------ | :------ |
| \`someFunctionWithArrow\` | () => \`string\` | Comments for someFunctionWithArrow |
| \`x\`? | \`string\` | comment for x |
| \`y\` | \`object\` | comment for y |
| \`y.x\` | \`string\` | comment for y.x |
| \`y.y\`? | \`boolean\` \\| \`string\` | comment for y.y |
| \`y.z\` | (\`x\`: \`string\`) => \`string\` | comment for y.z |
| \`z\` | (\`x\`: \`string\`) => \`string\` | - |
| \`get accessorA\` | [\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\> | Comments for accessorA getter |
| \`set accessorA\` | \`void\` | Comments for accessorA setter |
| \`get accessorB\` | \`string\` | - |
| \`set accessorB\` | \`void\` | - |
| \`someFunction()\` | [\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`any\`\\> | Comments for someFunction |

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile external reference type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: ExternalReferenceType

> **ExternalReferenceType**: [\`ClassWithTypeParameters\`](../classes/ClassWithTypeParameters.md)\\<\`"x"\`, \`"y"\`\\>

Comments for ExternalReferenceType

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile external reference type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: ExternalReferenceType

\`\`\`ts
type ExternalReferenceType = ClassWithTypeParameters<"x", "y">;
\`\`\`

Comments for ExternalReferenceType

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile function type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: FunctionType()

> **FunctionType**: (\`name\`, \`value\`) => \`void\`

Comments for FunctionType

- Test link resolution for:

- [\`LiteralType\`](LiteralType.md) and uses [LiteralType#x](LiteralType.md#x)
- [\`BasicInterface\`](../interfaces/BasicInterface.md) and uses [BasicInterface#prop](../interfaces/BasicInterface.md#prop)
- [\`BasicClass\`](../classes/BasicClass.md) and uses [BasicClass#prop](../classes/BasicClass.md#prop)
- [\`BasicEnum\`](../enumerations/BasicEnum.md) and uses [BasicEnum#MemberA](../enumerations/BasicEnum.md#membera)

## Parameters

### name

\`string\`

### value

\`unknown\`

## Returns

\`void\`

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile function type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: FunctionType()

\`\`\`ts
type FunctionType = (name: string, value: unknown) => void;
\`\`\`

Comments for FunctionType

- Test link resolution for:

- [\`LiteralType\`](LiteralType.md) and uses [LiteralType#x](LiteralType.md)
- [\`BasicInterface\`](../interfaces/BasicInterface.md) and uses [BasicInterface#prop](../interfaces/BasicInterface.md)
- [\`BasicClass\`](../classes/BasicClass.md) and uses [BasicClass#prop](../classes/BasicClass.md)
- [\`BasicEnum\`](../enumerations/BasicEnum.md) and uses [BasicEnum#MemberA](../enumerations/BasicEnum.md)

## Parameters

| Parameter | Type |
| :------ | :------ |
| \`name\` | \`string\` |
| \`value\` | \`unknown\` |

## Returns

\`void\`

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile index access type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: IndexAccessType

> **IndexAccessType**: [\`ArrayOfObjectsType\`](ArrayOfObjectsType.md)\\[\`number\`\\]

Comments for IndexAccessType

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile index access type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: IndexAccessType

\`\`\`ts
type IndexAccessType = ArrayOfObjectsType[number];
\`\`\`

Comments for IndexAccessType

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile intersection type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: IntersectionType

> **IntersectionType**: [\`TupleType\`](TupleType.md) & [\`ArrayType\`](ArrayType.md) & \`object\`

Comments for IntersectionType

## Type declaration

### bar

> **bar**: \`number\`

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile intersection type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: IntersectionType

\`\`\`ts
type IntersectionType = TupleType & ArrayType & object;
\`\`\`

Comments for IntersectionType

## Type declaration

| Name | Type |
| :------ | :------ |
| \`bar\` | \`number\` |

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile partial mapped type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: PartialMappedType\\<T\\>

> **PartialMappedType**\\<\`T\`\\>: \`{ [P in keyof T]?: T[P] }\`

Comments for PartialMappedType

## Type Parameters

â€¢ **T**

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile partial mapped type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: PartialMappedType\\<T\\>

\`\`\`ts
type PartialMappedType<T> = { [P in keyof T]?: T[P] };
\`\`\`

Comments for PartialMappedType

## Type Parameters

| Type Parameter |
| :------ |
| \`T\` |

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile primitive type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: PrimitiveType

> **PrimitiveType**: \`boolean\`

Comments for PrimitiveType

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile primitive type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: PrimitiveType

\`\`\`ts
type PrimitiveType = boolean;
\`\`\`

Comments for PrimitiveType

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile query type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: QueryType

> **QueryType**: *typeof* [\`someQuery\`](../variables/someQuery.md)

Comments for query type

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile query type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: QueryType

\`\`\`ts
type QueryType = typeof someQuery;
\`\`\`

Comments for query type

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile readonly mapped type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: ReadonlyMappedType\\<T\\>

> **ReadonlyMappedType**\\<\`T\`\\>: \`{ readonly [P in keyof T]: T[P] }\`

Comments for ReadonlyMapedType

## Type Parameters

â€¢ **T**

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile readonly mapped type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: ReadonlyMappedType\\<T\\>

\`\`\`ts
type ReadonlyMappedType<T> = { readonly [P in keyof T]: T[P] };
\`\`\`

Comments for ReadonlyMapedType

## Type Parameters

| Type Parameter |
| :------ |
| \`T\` |

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile string literal type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: StringLiteralType

> **StringLiteralType**: \`" "\` \\| \`"string"\` \\| "string\\|with\\|pipes" \\| "string\\\`with\\\`backticks" \\| \`"<foo>"\` \\| \`"*"\`

Comments for StringLiteralType

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile string literal type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: StringLiteralType

\`\`\`ts
type StringLiteralType = 
  | " "
  | "string"
  | "string|with|pipes"
  | "string\`with\`backticks"
  | "<foo>"
  | "*";
\`\`\`

Comments for StringLiteralType

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile string tuple type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: TupleType

> **TupleType**: [\`string\`, \`number\`]

Comments for TupleType

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile string tuple type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: TupleType

\`\`\`ts
type TupleType = [string, number];
\`\`\`

Comments for TupleType

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile type parameter type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: TypeWithTypeParams\\<T, R\\>

> **TypeWithTypeParams**\\<\`T\`, \`R\`\\>: [\`T\`, \`R\`]

Comments for TypeWithTypeParams

## Type Parameters

â€¢ **T**

â€¢ **R**

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile type parameter type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: TypeWithTypeParams\\<T, R\\>

\`\`\`ts
type TypeWithTypeParams<T, R> = [T, R];
\`\`\`

Comments for TypeWithTypeParams

## Type Parameters

| Type Parameter |
| :------ |
| \`T\` |
| \`R\` |

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile type with returns: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: TypeWithReturns

> **TypeWithReturns**: \`string\`

Comments for TypeWithReturns

## Returns

- return comments.

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile type with returns: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: TypeWithReturns

\`\`\`ts
type TypeWithReturns = string;
\`\`\`

Comments for TypeWithReturns

## Returns

- return comments.

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile union type with template strings: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: UnionTypeWithTemplateStrings

> **UnionTypeWithTemplateStrings**: \\\`v$\\{number\\}\\\` \\| \\\`v$\\{number\\}.$\\{number\\}\\\` \\| \\\`v$\\{number\\}.$\\{number\\}.$\\{number\\}\\\`

Union with template strings

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile union type with template strings: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: UnionTypeWithTemplateStrings

\`\`\`ts
type UnionTypeWithTemplateStrings = 
  | \`v\${number}\`
  | \`v\${number}.\${number}\`
  | \`v\${number}.\${number}.\${number}\`;
\`\`\`

Union with template strings

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile union type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: UnionType

> **UnionType**: \`string\` \\| \`boolean\` \\| \\{ \`z\`: \`string\`; \\}

Comments for UnionType

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile union type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: UnionType

\`\`\`ts
type UnionType = 
  | string
  | boolean
  | {
  z: string;
};
\`\`\`

Comments for UnionType

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile useful union type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: UsefulUnionType

> **UsefulUnionType**: \`string\` \\| \`boolean\` \\| \\{ \`z\`: \`string\`; \\}

Comments for useful UnionType

## Type declaration

\`string\`

\`boolean\`

\\{ \`z\`: \`string\`; \\}

### z

> **z**: \`string\`

Comments for z

## Source

[types.ts:1](http://source-url)
"
`;

exports[`Type Alias Reflection should compile useful union type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: UsefulUnionType

\`\`\`ts
type UsefulUnionType = 
  | string
  | boolean
  | {
  z: string;
};
\`\`\`

Comments for useful UnionType

## Type declaration

\`string\`

\`boolean\`

\\{
  \`z\`: \`string\`;
 \\}

| Name | Type | Description |
| :------ | :------ | :------ |
| \`z\` | \`string\` | Comments for z |

## Source

[types.ts:1](http://source-url)
"
`;
